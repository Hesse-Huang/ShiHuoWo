//
//  SHWStyleKit.swift
//  ShiHuoWo
//
//  Created by Hesse on 16/4/20.
//  Copyright (c) 2016 DaZhua Inc.. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class SHWStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfLoginTriangle: UIImage?
        static var loginTriangleTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawLoginTriangle() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 0, y: 11))
        bezierPath.addLineToPoint(CGPoint(x: 10.92, y: 0))
        bezierPath.addLineToPoint(CGPoint(x: 21, y: 11))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: 11))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: 11))
        bezierPath.lineCapStyle = .Round;

        UIColor.whiteColor().setFill()
        bezierPath.fill()
    }

    public class func drawBubble(frame frame: CGRect = CGRect(x: 0, y: 0, width: 96, height: 19), content: String = "好友链: 8.5折优惠") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let shenMaOrange = UIColor(red: 1.000, green: 0.427, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: frame.minX + 15.98, y: frame.minY + 1))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 11.69, y: frame.minY + 1.32), controlPoint1: CGPoint(x: frame.minX + 13.88, y: frame.minY + 1), controlPoint2: CGPoint(x: frame.minX + 12.82, y: frame.minY + 1))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 9.03, y: frame.minY + 3.67), controlPoint1: CGPoint(x: frame.minX + 10.45, y: frame.minY + 1.72), controlPoint2: CGPoint(x: frame.minX + 9.48, y: frame.minY + 2.58))
        bezierPath.addLineToPoint(CGPoint(x: frame.minX + 8.99, y: frame.minY + 3.83))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 8.5, y: frame.minY + 0.39474 * frame.height), controlPoint1: CGPoint(x: frame.minX + 8.67, y: frame.minY + 4.67), controlPoint2: CGPoint(x: frame.minX + 8.5, y: frame.minY + 0.29429 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 3.5, y: frame.minY + 0.47917 * frame.height), controlPoint1: CGPoint(x: frame.minX + 4.99, y: frame.minY + 0.47332 * frame.height), controlPoint2: CGPoint(x: frame.minX + 3.5, y: frame.minY + 0.47917 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 8.5, y: frame.minY + 0.65789 * frame.height), controlPoint1: CGPoint(x: frame.minX + 3.5, y: frame.minY + 0.47917 * frame.height), controlPoint2: CGPoint(x: frame.minX + 4.99, y: frame.minY + 0.57931 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 9.03, y: frame.maxY - 3.67), controlPoint1: CGPoint(x: frame.minX + 8.5, y: frame.minY + 0.76137 * frame.height), controlPoint2: CGPoint(x: frame.minX + 8.67, y: frame.maxY - 4.67))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 11.69, y: frame.maxY - 1.32), controlPoint1: CGPoint(x: frame.minX + 9.48, y: frame.maxY - 2.58), controlPoint2: CGPoint(x: frame.minX + 10.45, y: frame.maxY - 1.72))
        bezierPath.addLineToPoint(CGPoint(x: frame.minX + 11.88, y: frame.maxY - 1.28))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 15.98, y: frame.maxY - 1), controlPoint1: CGPoint(x: frame.minX + 12.82, y: frame.maxY - 1), controlPoint2: CGPoint(x: frame.minX + 13.88, y: frame.maxY - 1))
        bezierPath.addLineToPoint(CGPoint(x: frame.maxX - 8.31, y: frame.maxY - 1))
        bezierPath.addCurveToPoint(CGPoint(x: frame.maxX - 4.02, y: frame.maxY - 1.32), controlPoint1: CGPoint(x: frame.maxX - 6.2, y: frame.maxY - 1), controlPoint2: CGPoint(x: frame.maxX - 5.15, y: frame.maxY - 1))
        bezierPath.addCurveToPoint(CGPoint(x: frame.maxX - 1.36, y: frame.maxY - 3.67), controlPoint1: CGPoint(x: frame.maxX - 2.78, y: frame.maxY - 1.72), controlPoint2: CGPoint(x: frame.maxX - 1.81, y: frame.maxY - 2.58))
        bezierPath.addLineToPoint(CGPoint(x: frame.maxX - 1.31, y: frame.maxY - 3.83))
        bezierPath.addCurveToPoint(CGPoint(x: frame.maxX - 1, y: frame.maxY - 7.47), controlPoint1: CGPoint(x: frame.maxX - 1, y: frame.maxY - 4.67), controlPoint2: CGPoint(x: frame.maxX - 1, y: frame.maxY - 5.61))
        bezierPath.addLineToPoint(CGPoint(x: frame.maxX - 1, y: frame.minY + 7.47))
        bezierPath.addCurveToPoint(CGPoint(x: frame.maxX - 1.36, y: frame.minY + 3.67), controlPoint1: CGPoint(x: frame.maxX - 1, y: frame.minY + 5.61), controlPoint2: CGPoint(x: frame.maxX - 1, y: frame.minY + 4.67))
        bezierPath.addCurveToPoint(CGPoint(x: frame.maxX - 4.02, y: frame.minY + 1.32), controlPoint1: CGPoint(x: frame.maxX - 1.81, y: frame.minY + 2.58), controlPoint2: CGPoint(x: frame.maxX - 2.78, y: frame.minY + 1.72))
        bezierPath.addLineToPoint(CGPoint(x: frame.maxX - 4.2, y: frame.minY + 1.28))
        bezierPath.addCurveToPoint(CGPoint(x: frame.maxX - 8.31, y: frame.minY + 1), controlPoint1: CGPoint(x: frame.maxX - 5.15, y: frame.minY + 1), controlPoint2: CGPoint(x: frame.maxX - 6.2, y: frame.minY + 1))
        bezierPath.addLineToPoint(CGPoint(x: frame.minX + 15.98, y: frame.minY + 1))
        bezierPath.closePath()
        shenMaOrange.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: frame.minX + 11, y: frame.minY + floor((frame.height - 15) * 0.50000 + 0.5), width: frame.width - 12, height: 15)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(10), NSForegroundColorAttributeName: shenMaOrange, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: content).boundingRectWithSize(CGSize(width: textRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect)
        NSString(string: content).drawInRect(CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfLoginTriangle: UIImage {
        if Cache.imageOfLoginTriangle != nil {
            return Cache.imageOfLoginTriangle!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 11), false, 0)
            SHWStyleKit.drawLoginTriangle()

        Cache.imageOfLoginTriangle = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfLoginTriangle!
    }

    public class func imageOfBubble(frame frame: CGRect = CGRect(x: 0, y: 0, width: 96, height: 19), content: String = "好友链: 8.5折优惠") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            SHWStyleKit.drawBubble(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), content: content)

        let imageOfBubble = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBubble
    }

    //// Customization Infrastructure

    @IBOutlet var loginTriangleTargets: [AnyObject]! {
        get { return Cache.loginTriangleTargets }
        set {
            Cache.loginTriangleTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: SHWStyleKit.imageOfLoginTriangle)
            }
        }
    }

}
