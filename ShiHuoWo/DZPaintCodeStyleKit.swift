//
//  DZPaintCodeStyleKit.swift
//  Shenma
//
//  Created by Hesse on 16/1/27.
//  Copyright (c) 2016 DaZhua Inc.. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class DZPaintCodeStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let dzDefaultColor: UIColor = UIColor(red: 1.000, green: 0.809, blue: 0.660, alpha: 1.000)
        static var imageOfMessageCenterIcon: UIImage?
        static var messageCenterIconTargets: [AnyObject]?
        static var imageOfScanIcon: UIImage?
        static var scanIconTargets: [AnyObject]?
        static var imageOfRefreshIcon: UIImage?
        static var refreshIconTargets: [AnyObject]?
        static var imageOfNFriendIcon: UIImage?
        static var nFriendIconTargets: [AnyObject]?
        static var imageOfNAccountIcon: UIImage?
        static var nAccountIconTargets: [AnyObject]?
        static var imageOfMessageToken: UIImage?
        static var messageTokenTargets: [AnyObject]?
    }

    //// Colors

    public class var dzDefaultColor: UIColor { return Cache.dzDefaultColor }

    //// Drawing Methods

    public class func drawMessageCenterIcon() {

        //// Group
        //// outerOval Drawing
        let outerOvalPath = UIBezierPath()
        outerOvalPath.moveToPoint(CGPointMake(6.51, 18.33))
        outerOvalPath.addCurveToPoint(CGPointMake(4, 12.62), controlPoint1: CGPointMake(4.95, 16.81), controlPoint2: CGPointMake(4, 14.81))
        outerOvalPath.addCurveToPoint(CGPointMake(14, 4), controlPoint1: CGPointMake(4, 7.86), controlPoint2: CGPointMake(8.48, 4))
        outerOvalPath.addCurveToPoint(CGPointMake(24, 12.62), controlPoint1: CGPointMake(19.52, 4), controlPoint2: CGPointMake(24, 7.86))
        outerOvalPath.addCurveToPoint(CGPointMake(14.57, 21.24), controlPoint1: CGPointMake(24, 17.38), controlPoint2: CGPointMake(20.1, 21.24))
        outerOvalPath.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        outerOvalPath.lineWidth = 2
        outerOvalPath.stroke()


        //// centralDot Drawing
        let centralDotPath = UIBezierPath(ovalInRect: CGRectMake(13, 11, 3, 3))
        DZPaintCodeStyleKit.dzDefaultColor.setFill()
        centralDotPath.fill()


        //// rightDot Drawing
        let rightDotPath = UIBezierPath(ovalInRect: CGRectMake(18, 11, 3, 3))
        DZPaintCodeStyleKit.dzDefaultColor.setFill()
        rightDotPath.fill()


        //// leftDot Drawing
        let leftDotPath = UIBezierPath(ovalInRect: CGRectMake(8, 11, 3, 3))
        DZPaintCodeStyleKit.dzDefaultColor.setFill()
        leftDotPath.fill()


        //// angularArc Drawing
        let angularArcPath = UIBezierPath()
        angularArcPath.moveToPoint(CGPointMake(8.83, 20.09))
        angularArcPath.addCurveToPoint(CGPointMake(8.83, 24), controlPoint1: CGPointMake(10.44, 22.16), controlPoint2: CGPointMake(8.83, 24))
        angularArcPath.addCurveToPoint(CGPointMake(14.57, 21.24), controlPoint1: CGPointMake(8.83, 24), controlPoint2: CGPointMake(12.62, 22.74))
        angularArcPath.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        angularArcPath.lineWidth = 2
        angularArcPath.stroke()
    }

    public class func drawScanIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group
        //// topLeftPath Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 6.86, 6.96)

        let topLeftPathPath = UIBezierPath()
        topLeftPathPath.moveToPoint(CGPointMake(-2.86, 2.96))
        topLeftPathPath.addLineToPoint(CGPointMake(-2.86, -1.15))
        topLeftPathPath.addCurveToPoint(CGPointMake(-2.78, -2.17), controlPoint1: CGPointMake(-2.86, -1.67), controlPoint2: CGPointMake(-2.86, -1.93))
        topLeftPathPath.addLineToPoint(CGPointMake(-2.77, -2.21))
        topLeftPathPath.addCurveToPoint(CGPointMake(-2.14, -2.87), controlPoint1: CGPointMake(-2.66, -2.52), controlPoint2: CGPointMake(-2.43, -2.76))
        topLeftPathPath.addCurveToPoint(CGPointMake(-1.11, -2.96), controlPoint1: CGPointMake(-1.86, -2.96), controlPoint2: CGPointMake(-1.61, -2.96))
        topLeftPathPath.addLineToPoint(CGPointMake(2.86, -2.96))
        topLeftPathPath.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        topLeftPathPath.lineWidth = 2
        topLeftPathPath.stroke()

        CGContextRestoreGState(context)


        //// topRightPath Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 21.14, 6.96)
        CGContextRotateCTM(context, 90 * CGFloat(M_PI) / 180)

        let topRightPathPath = UIBezierPath()
        topRightPathPath.moveToPoint(CGPointMake(-2.96, 2.86))
        topRightPathPath.addLineToPoint(CGPointMake(-2.96, -1.11))
        topRightPathPath.addCurveToPoint(CGPointMake(-2.89, -2.09), controlPoint1: CGPointMake(-2.96, -1.61), controlPoint2: CGPointMake(-2.96, -1.86))
        topRightPathPath.addLineToPoint(CGPointMake(-2.87, -2.14))
        topRightPathPath.addCurveToPoint(CGPointMake(-2.21, -2.77), controlPoint1: CGPointMake(-2.76, -2.43), controlPoint2: CGPointMake(-2.52, -2.66))
        topRightPathPath.addCurveToPoint(CGPointMake(-1.15, -2.86), controlPoint1: CGPointMake(-1.93, -2.86), controlPoint2: CGPointMake(-1.67, -2.86))
        topRightPathPath.addLineToPoint(CGPointMake(2.96, -2.86))
        topRightPathPath.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        topRightPathPath.lineWidth = 2
        topRightPathPath.stroke()

        CGContextRestoreGState(context)


        //// bottomLeftPath Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 6.86, 21.04)
        CGContextRotateCTM(context, -90 * CGFloat(M_PI) / 180)

        let bottomLeftPathPath = UIBezierPath()
        bottomLeftPathPath.moveToPoint(CGPointMake(-2.96, 2.86))
        bottomLeftPathPath.addLineToPoint(CGPointMake(-2.96, -1.11))
        bottomLeftPathPath.addCurveToPoint(CGPointMake(-2.89, -2.09), controlPoint1: CGPointMake(-2.96, -1.61), controlPoint2: CGPointMake(-2.96, -1.86))
        bottomLeftPathPath.addLineToPoint(CGPointMake(-2.87, -2.14))
        bottomLeftPathPath.addCurveToPoint(CGPointMake(-2.21, -2.77), controlPoint1: CGPointMake(-2.76, -2.43), controlPoint2: CGPointMake(-2.52, -2.66))
        bottomLeftPathPath.addCurveToPoint(CGPointMake(-1.15, -2.86), controlPoint1: CGPointMake(-1.93, -2.86), controlPoint2: CGPointMake(-1.67, -2.86))
        bottomLeftPathPath.addLineToPoint(CGPointMake(2.96, -2.86))
        bottomLeftPathPath.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        bottomLeftPathPath.lineWidth = 2
        bottomLeftPathPath.stroke()

        CGContextRestoreGState(context)


        //// bottomRightPath Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 21.14, 21.04)
        CGContextRotateCTM(context, 180 * CGFloat(M_PI) / 180)

        let bottomRightPathPath = UIBezierPath()
        bottomRightPathPath.moveToPoint(CGPointMake(-2.86, 2.96))
        bottomRightPathPath.addLineToPoint(CGPointMake(-2.86, -1.15))
        bottomRightPathPath.addCurveToPoint(CGPointMake(-2.78, -2.17), controlPoint1: CGPointMake(-2.86, -1.67), controlPoint2: CGPointMake(-2.86, -1.93))
        bottomRightPathPath.addLineToPoint(CGPointMake(-2.77, -2.21))
        bottomRightPathPath.addCurveToPoint(CGPointMake(-2.14, -2.87), controlPoint1: CGPointMake(-2.66, -2.52), controlPoint2: CGPointMake(-2.43, -2.76))
        bottomRightPathPath.addCurveToPoint(CGPointMake(-1.11, -2.96), controlPoint1: CGPointMake(-1.86, -2.96), controlPoint2: CGPointMake(-1.61, -2.96))
        bottomRightPathPath.addLineToPoint(CGPointMake(2.86, -2.96))
        bottomRightPathPath.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        bottomRightPathPath.lineWidth = 2
        bottomRightPathPath.stroke()

        CGContextRestoreGState(context)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(4.71, 14.37))
        bezierPath.addLineToPoint(CGPointMake(23.29, 14.37))
        bezierPath.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
    }

    public class func drawRefreshIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.moveToPoint(CGPointMake(22.49, 18.38))
        ovalPath.addCurveToPoint(CGPointMake(13.73, 24), controlPoint1: CGPointMake(20.91, 21.71), controlPoint2: CGPointMake(17.58, 24))
        ovalPath.addCurveToPoint(CGPointMake(4, 14), controlPoint1: CGPointMake(8.36, 24), controlPoint2: CGPointMake(4, 19.52))
        ovalPath.addCurveToPoint(CGPointMake(13.73, 4), controlPoint1: CGPointMake(4, 8.48), controlPoint2: CGPointMake(8.36, 4))
        ovalPath.addCurveToPoint(CGPointMake(22.59, 9.85), controlPoint1: CGPointMake(17.67, 4), controlPoint2: CGPointMake(21.06, 6.4))
        ovalPath.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// arrow Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 22.28, 9.22)
        CGContextRotateCTM(context, 18.63 * CGFloat(M_PI) / 180)

        let arrowPath = UIBezierPath()
        arrowPath.moveToPoint(CGPointMake(-1.61, 1.65))
        arrowPath.addLineToPoint(CGPointMake(1.61, 1.65))
        arrowPath.addLineToPoint(CGPointMake(1.61, -1.65))
        arrowPath.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        arrowPath.lineWidth = 2
        arrowPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawNFriendIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 12.25, 17.85)
        CGContextRotateCTM(context, -50.41 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath()
        ovalPath.moveToPoint(CGPointMake(6.25, 0.4))
        ovalPath.addCurveToPoint(CGPointMake(3.73, 4.72), controlPoint1: CGPointMake(6.25, 2.19), controlPoint2: CGPointMake(5.28, 3.77))
        ovalPath.addCurveToPoint(CGPointMake(0.25, 3.65), controlPoint1: CGPointMake(2.77, 5.31), controlPoint2: CGPointMake(1.58, 3.65))
        ovalPath.addCurveToPoint(CGPointMake(-3.75, 4.65), controlPoint1: CGPointMake(-1.17, 3.65), controlPoint2: CGPointMake(-2.65, 5.32))
        ovalPath.addCurveToPoint(CGPointMake(-6.25, 0.4), controlPoint1: CGPointMake(-5.33, 3.7), controlPoint2: CGPointMake(-6.25, 2.11))
        ovalPath.addCurveToPoint(CGPointMake(0, -4.85), controlPoint1: CGPointMake(-6.25, -2.49), controlPoint2: CGPointMake(-3.45, -4.85))
        ovalPath.addCurveToPoint(CGPointMake(6.25, 0.4), controlPoint1: CGPointMake(3.45, -4.85), controlPoint2: CGPointMake(6.25, -2.49))
        ovalPath.closePath()
        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()

        CGContextRestoreGState(context)


        //// Oval 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 1, 11.96)
        CGContextRotateCTM(context, -40.57 * CGFloat(M_PI) / 180)

        let oval3Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 3, 4))
        DZPaintCodeStyleKit.dzDefaultColor.setFill()
        oval3Path.fill()

        CGContextRestoreGState(context)


        //// Oval 5 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 5, 7.96)
        CGContextRotateCTM(context, -40.57 * CGFloat(M_PI) / 180)

        let oval5Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 3, 4))
        DZPaintCodeStyleKit.dzDefaultColor.setFill()
        oval5Path.fill()

        CGContextRestoreGState(context)


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(17.5, 7))
        bezier3Path.addLineToPoint(CGPointMake(26.5, 7))
        bezier3Path.moveToPoint(CGPointMake(22, 2.5))
        bezier3Path.addLineToPoint(CGPointMake(22, 11.5))
        bezier3Path.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()


        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 0, 17.96)
        CGContextRotateCTM(context, -40.57 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 3, 4))
        DZPaintCodeStyleKit.dzDefaultColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)


        //// Oval 4 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 11, 7.96)
        CGContextRotateCTM(context, -40.57 * CGFloat(M_PI) / 180)

        let oval4Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 3, 4))
        DZPaintCodeStyleKit.dzDefaultColor.setFill()
        oval4Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawNAccountIcon() {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(25, 15))
        rectanglePath.addLineToPoint(CGPointMake(25, 20.94))
        rectanglePath.addCurveToPoint(CGPointMake(24.87, 22.66), controlPoint1: CGPointMake(25, 21.82), controlPoint2: CGPointMake(25, 22.26))
        rectanglePath.addLineToPoint(CGPointMake(24.85, 22.74))
        rectanglePath.addCurveToPoint(CGPointMake(23.74, 23.85), controlPoint1: CGPointMake(24.66, 23.25), controlPoint2: CGPointMake(24.25, 23.66))
        rectanglePath.addCurveToPoint(CGPointMake(21.94, 24), controlPoint1: CGPointMake(23.26, 24), controlPoint2: CGPointMake(22.82, 24))
        rectanglePath.addLineToPoint(CGPointMake(7.06, 24))
        rectanglePath.addCurveToPoint(CGPointMake(5.34, 23.87), controlPoint1: CGPointMake(6.18, 24), controlPoint2: CGPointMake(5.74, 24))
        rectanglePath.addLineToPoint(CGPointMake(5.26, 23.85))
        rectanglePath.addCurveToPoint(CGPointMake(4.15, 22.74), controlPoint1: CGPointMake(4.75, 23.66), controlPoint2: CGPointMake(4.34, 23.25))
        rectanglePath.addCurveToPoint(CGPointMake(4, 20.94), controlPoint1: CGPointMake(4, 22.26), controlPoint2: CGPointMake(4, 21.82))
        rectanglePath.addLineToPoint(CGPointMake(4, 10.06))
        rectanglePath.addCurveToPoint(CGPointMake(4.13, 8.34), controlPoint1: CGPointMake(4, 9.18), controlPoint2: CGPointMake(4, 8.74))
        rectanglePath.addLineToPoint(CGPointMake(4.15, 8.26))
        rectanglePath.addCurveToPoint(CGPointMake(5.26, 7.15), controlPoint1: CGPointMake(4.34, 7.75), controlPoint2: CGPointMake(4.75, 7.34))
        rectanglePath.addCurveToPoint(CGPointMake(7.06, 7), controlPoint1: CGPointMake(5.74, 7), controlPoint2: CGPointMake(6.18, 7))
        rectanglePath.addLineToPoint(CGPointMake(13, 7))
        rectanglePath.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(17.5, 7))
        bezier3Path.addLineToPoint(CGPointMake(26.5, 7))
        bezier3Path.moveToPoint(CGPointMake(22, 2.5))
        bezier3Path.addLineToPoint(CGPointMake(22, 11.5))
        bezier3Path.lineCapStyle = .Round;

        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(4.5, 17.5))
        bezierPath.addLineToPoint(CGPointMake(24.5, 17.5))
        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(4.5, 20.5))
        bezier2Path.addLineToPoint(CGPointMake(24.5, 20.5))
        bezier2Path.addLineToPoint(CGPointMake(24.5, 20.5))
        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPointMake(7.5, 17.5))
        bezier4Path.addLineToPoint(CGPointMake(9.5, 20.5))
        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.moveToPoint(CGPointMake(13.5, 17.5))
        bezier6Path.addLineToPoint(CGPointMake(15.5, 20.5))
        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.moveToPoint(CGPointMake(19.5, 17.5))
        bezier9Path.addLineToPoint(CGPointMake(21.5, 20.5))
        DZPaintCodeStyleKit.dzDefaultColor.setStroke()
        bezier9Path.lineWidth = 1
        bezier9Path.stroke()
    }

    public class func drawMessageToken() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let tokenPink = UIColor(red: 1.000, green: 0.248, blue: 0.248, alpha: 0.500)

        //// Group
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 139, 60)
        CGContextRotateCTM(context, -18.52 * CGFloat(M_PI) / 180)



        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(-30, -30, 112, 60), cornerRadius: 10)
        tokenPink.setStroke()
        rectanglePath.lineWidth = 6
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRectMake(-30, -30, 112, 60)
        let textTextContent = NSString(string: "New")
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .Center

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(36), NSForegroundColorAttributeName: tokenPink, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        textTextContent.drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

    public class func drawBubble(frame frame: CGRect = CGRectMake(0, 0, 96, 19), content: String = "购买后返100.0%") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 15.98, frame.minY + 1))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 11.69, frame.minY + 1.32), controlPoint1: CGPointMake(frame.minX + 13.88, frame.minY + 1), controlPoint2: CGPointMake(frame.minX + 12.82, frame.minY + 1))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 9.03, frame.minY + 3.67), controlPoint1: CGPointMake(frame.minX + 10.45, frame.minY + 1.72), controlPoint2: CGPointMake(frame.minX + 9.48, frame.minY + 2.58))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 8.99, frame.minY + 3.83))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 8.5, frame.minY + 0.39474 * frame.height), controlPoint1: CGPointMake(frame.minX + 8.67, frame.minY + 4.67), controlPoint2: CGPointMake(frame.minX + 8.5, frame.minY + 0.29429 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 3.5, frame.minY + 0.47917 * frame.height), controlPoint1: CGPointMake(frame.minX + 4.99, frame.minY + 0.47332 * frame.height), controlPoint2: CGPointMake(frame.minX + 3.5, frame.minY + 0.47917 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 8.5, frame.minY + 0.65789 * frame.height), controlPoint1: CGPointMake(frame.minX + 3.5, frame.minY + 0.47917 * frame.height), controlPoint2: CGPointMake(frame.minX + 4.99, frame.minY + 0.57931 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 9.03, frame.maxY - 3.67), controlPoint1: CGPointMake(frame.minX + 8.5, frame.minY + 0.76137 * frame.height), controlPoint2: CGPointMake(frame.minX + 8.67, frame.maxY - 4.67))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 11.69, frame.maxY - 1.32), controlPoint1: CGPointMake(frame.minX + 9.48, frame.maxY - 2.58), controlPoint2: CGPointMake(frame.minX + 10.45, frame.maxY - 1.72))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 11.88, frame.maxY - 1.28))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 15.98, frame.maxY - 1), controlPoint1: CGPointMake(frame.minX + 12.82, frame.maxY - 1), controlPoint2: CGPointMake(frame.minX + 13.88, frame.maxY - 1))
        bezierPath.addLineToPoint(CGPointMake(frame.maxX - 8.31, frame.maxY - 1))
        bezierPath.addCurveToPoint(CGPointMake(frame.maxX - 4.02, frame.maxY - 1.32), controlPoint1: CGPointMake(frame.maxX - 6.2, frame.maxY - 1), controlPoint2: CGPointMake(frame.maxX - 5.15, frame.maxY - 1))
        bezierPath.addCurveToPoint(CGPointMake(frame.maxX - 1.36, frame.maxY - 3.67), controlPoint1: CGPointMake(frame.maxX - 2.78, frame.maxY - 1.72), controlPoint2: CGPointMake(frame.maxX - 1.81, frame.maxY - 2.58))
        bezierPath.addLineToPoint(CGPointMake(frame.maxX - 1.31, frame.maxY - 3.83))
        bezierPath.addCurveToPoint(CGPointMake(frame.maxX - 1, frame.maxY - 7.47), controlPoint1: CGPointMake(frame.maxX - 1, frame.maxY - 4.67), controlPoint2: CGPointMake(frame.maxX - 1, frame.maxY - 5.61))
        bezierPath.addLineToPoint(CGPointMake(frame.maxX - 1, frame.minY + 7.47))
        bezierPath.addCurveToPoint(CGPointMake(frame.maxX - 1.36, frame.minY + 3.67), controlPoint1: CGPointMake(frame.maxX - 1, frame.minY + 5.61), controlPoint2: CGPointMake(frame.maxX - 1, frame.minY + 4.67))
        bezierPath.addCurveToPoint(CGPointMake(frame.maxX - 4.02, frame.minY + 1.32), controlPoint1: CGPointMake(frame.maxX - 1.81, frame.minY + 2.58), controlPoint2: CGPointMake(frame.maxX - 2.78, frame.minY + 1.72))
        bezierPath.addLineToPoint(CGPointMake(frame.maxX - 4.2, frame.minY + 1.28))
        bezierPath.addCurveToPoint(CGPointMake(frame.maxX - 8.31, frame.minY + 1), controlPoint1: CGPointMake(frame.maxX - 5.15, frame.minY + 1), controlPoint2: CGPointMake(frame.maxX - 6.2, frame.minY + 1))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 15.98, frame.minY + 1))
        bezierPath.closePath()
        UIColor.whiteColor().setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Text Drawing
        let textRect = CGRectMake(frame.minX + 11, frame.minY + floor((frame.height - 15) * 0.50000 + 0.5), frame.width - 12, 15)
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(11), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: content).boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        NSString(string: content).drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfMessageCenterIcon: UIImage {
        if Cache.imageOfMessageCenterIcon != nil {
            return Cache.imageOfMessageCenterIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), false, 0)
            DZPaintCodeStyleKit.drawMessageCenterIcon()

        Cache.imageOfMessageCenterIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfMessageCenterIcon!
    }

    public class var imageOfScanIcon: UIImage {
        if Cache.imageOfScanIcon != nil {
            return Cache.imageOfScanIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), false, 0)
            DZPaintCodeStyleKit.drawScanIcon()

        Cache.imageOfScanIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfScanIcon!
    }

    public class var imageOfRefreshIcon: UIImage {
        if Cache.imageOfRefreshIcon != nil {
            return Cache.imageOfRefreshIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), false, 0)
            DZPaintCodeStyleKit.drawRefreshIcon()

        Cache.imageOfRefreshIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfRefreshIcon!
    }

    public class var imageOfNFriendIcon: UIImage {
        if Cache.imageOfNFriendIcon != nil {
            return Cache.imageOfNFriendIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), false, 0)
            DZPaintCodeStyleKit.drawNFriendIcon()

        Cache.imageOfNFriendIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfNFriendIcon!
    }

    public class var imageOfNAccountIcon: UIImage {
        if Cache.imageOfNAccountIcon != nil {
            return Cache.imageOfNAccountIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), false, 0)
            DZPaintCodeStyleKit.drawNAccountIcon()

        Cache.imageOfNAccountIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfNAccountIcon!
    }

    public class var imageOfMessageToken: UIImage {
        if Cache.imageOfMessageToken != nil {
            return Cache.imageOfMessageToken!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(300, 118), false, 0)
            DZPaintCodeStyleKit.drawMessageToken()

        Cache.imageOfMessageToken = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfMessageToken!
    }

    public class func imageOfBubble(frame frame: CGRect = CGRectMake(0, 0, 96, 19), content: String = "购买后返100.0%") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            DZPaintCodeStyleKit.drawBubble(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), content: content)

        let imageOfBubble = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBubble
    }

    //// Customization Infrastructure

    @IBOutlet var messageCenterIconTargets: [AnyObject]! {
        get { return Cache.messageCenterIconTargets }
        set {
            Cache.messageCenterIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: DZPaintCodeStyleKit.imageOfMessageCenterIcon)
            }
        }
    }

    @IBOutlet var scanIconTargets: [AnyObject]! {
        get { return Cache.scanIconTargets }
        set {
            Cache.scanIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: DZPaintCodeStyleKit.imageOfScanIcon)
            }
        }
    }

    @IBOutlet var refreshIconTargets: [AnyObject]! {
        get { return Cache.refreshIconTargets }
        set {
            Cache.refreshIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: DZPaintCodeStyleKit.imageOfRefreshIcon)
            }
        }
    }

    @IBOutlet var nFriendIconTargets: [AnyObject]! {
        get { return Cache.nFriendIconTargets }
        set {
            Cache.nFriendIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: DZPaintCodeStyleKit.imageOfNFriendIcon)
            }
        }
    }

    @IBOutlet var nAccountIconTargets: [AnyObject]! {
        get { return Cache.nAccountIconTargets }
        set {
            Cache.nAccountIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: DZPaintCodeStyleKit.imageOfNAccountIcon)
            }
        }
    }

    @IBOutlet var messageTokenTargets: [AnyObject]! {
        get { return Cache.messageTokenTargets }
        set {
            Cache.messageTokenTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: DZPaintCodeStyleKit.imageOfMessageToken)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
